1. msys2 다운로드, 설치, 실행
 - Visual studio 2019 > x64 Native Tools Command Prompt for VS 2019를 관리자 권한으로 실행
 - msys 설치 폴더로 이동하여 msys2_shell.cmd -use-full-path -mingw64 로 실행

회사 인증서를 적용하여 msys 환경에서 인터넷이 되도록 함 (안하면 pacman으로 package를 설치할 수 없음)
** 인증서 내보내기 방법
윈도우 - 시작 - 실행 - 사용자 인증서 관리 - 신뢰할 수 있는 루트 인증 기관 - 인증서 - Somansa Root CA - DER로 인코딩된 바이너리
https://stackoverflow.com/questions/69348953/certificate-error-when-trying-to-install-msys2-packages-on-windows-server
msys설치경로\etc\pki\ca-trust\source\anchors\<anyfilename>.cer
$ update-ca-trust
## Done.

빌드 도구 설치
$ pacman -S make diffutils yasm nasm git pkg-config
$ pacman -Syu (중간에 msys 재실행 해야하는 경우 재실행 후 다시 pacman -Syu)
$ pacman -S mingw-w64-x86_64-meson
msys 설치 폴더의 user\bin\link.exe 파일명을 link.exe.backup 등으로 변경 (VS 2019의 link를 사용하기 위함)


2. ffmpeg 다운로드 (git으로 받아도 됨)


3. dav1d 다운로드
https://code.videolan.org/videolan/dav1d
dav1d 폴더에 build 폴더 만든후 해당 폴더로 이동
$ mkdir build
$ cd build
$ meson .. --default-library=static --prefix=/usr
$ ninja
$ ninja install

인스톨후 /usr/lib 디렉토리로 이동
libdav1d.a ->dav1d.lib로 windows 형식으로 lib 이름 변경

/usr/lib/pkgconfig/dav1d.pc 파일을 아래로 대체
//------------
prefix=D:/Source/msys64/usr
includedir=${prefix}/include
libdir=${prefix}/lib

Name: dav1d.lib
Description: AV1 decoding library
Version: 0.9.2
Libs: -L${libdir} -ldav1d
Cflags: -I${includedir}
// ---------------


4. NVSDK 다운로드
VIDEO CODEC SDK 설치 (https://developer.nvidia.com/nvidia-video-codec-sdk/download) (빌드에 쓰이는지 모르겠음..)
CUDA Toolkit 설치 (https://developer.nvidia.com/cuda-downloads?target_os=Windows&target_arch=x86_64&target_version=10&target_type=exe_local)
아래 사이트 참조하여 FFMPEG에서 참조가능하도록 셋팅
https://docs.nvidia.com/video-technologies/video-codec-sdk/ffmpeg-with-nvidia-gpu/
https://developer.nvidia.com/blog/nvidia-ffmpeg-transcoding-guide/
- CUDA Toolkit 설치경로(C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.0)의 include와 lib 폴더를 msys 환경으로 복사
  (ffmpeg 소스코드 경로와 동일한 depth로 nv_sdk\v12.0\include, nv_sdk\v12.0\lib 에 위치하도록)
msys에 CUDA ToolkitPATH 추가 : $ export PATH="/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.0/bin/":$PATH


5. NV CODEC header 다운로드 (git clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git)
https://git.videolan.org/git/ffmpeg/nv-codec-headers.git
경로에 가서
$ make
$ make install
/usr/lib/pkgconfig/ffnvcodec.pc가 생성됐는 지 확인
/usr/local/lib/pkgconfig/ffnvcodec.pc 경로에 생성됐다면 마지막에 FFmpeg configure 할 때 맨앞에 PKG_CONFIG_PATH="/usr/local/lib/pkgconfig" 을 붙여준다.


6. Intel MediaSDK 다운로드 (git clone https://github.com/Intel-Media-SDK/MediaSDK.git msdk)
https://github.com/Intel-Media-SDK/MediaSDK/wiki/Build-Media-SDK-on-Windows
AllBuild.sln 을 Visual studio 2019로 열어서 libmfx_vs2015를 release , x64로 빌드
(스펙터 완화 라이브러리 오류나면 MSVC v142 - VS 2019 C++ x64/x86 Specter 완화형 라이브러리 설치 후 빌드)
\build\win_x64\Release\lib\libmfx_vs2015.lib  복사 후 이름 변경 --> \build\win_x64\Release\lib\libmfx.lib
libmfx.lib 을 /usr/lib에 복사
/msdk/api/include 폴더 전체를 -> /usr/include 에 복사, 폴더명을 mfx로 바꿈
* 최종 FFmpeg configure에서 d3d11va을 disable 하면 qsv 디코딩이 동작하지 않으므로 주의


7. openh264
- https://github.com/cisco/openh264
- msys의 openh264 폴더로 이동해서 빌드함(OS 대문자로)
- $make OS=msvc PREFIX=/usr install


8. 최종 FFmpeg configure and compile
변경해야 할 configure 옵션이 있으면 build.sh 파일에 반영
$ ./build.sh
$ make
$ make install